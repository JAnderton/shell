#!/bin/bash

export PS4='+${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): } '

if declare -A fg_colors 2>/dev/null
then
    hash_cache=true
    declare -A bg_colors
else
    hash_cache=false
    declare -a fg_colors fg_values bg_colors bg_values
fi

truecolor=true
while getopts :68-: opt
do
    [[ - == $opt ]] && opt="${OPTARG%%=*}" OPTARG="${OPTARG#*=}"
    case $opt in
    6 | 256-color ) truecolor=false ;;
    8 | truecolor ) truecolor=true ;;
    esac
done
shift $(( OPTIND - 1 ))

pbold="\e[1m"
plight="\e[2m"
pitalic="\e[3m"
punderscore="\e[4m"
pblink="\e[5m"
preverse="\e[7m"
pinvisible="\e[8m"
pstrikethrough="\e[9m"

declare -a effects
for v in ${!p*}
do
    effects+=(${v#p})
done

preset="\e[0m"

pblack="\e[30m"
pred="\e[31m"
pgreen="\e[32m"
pyellow="\e[33m"
pblue="\e[34m"
pmagenta="\e[35m"
pcyan="\e[36m"
pwhite="\e[37m"

printf $preset

for e in ${effects[*]}
do
    echo This is $e
    for c in black red green yellow blue magenta cyan white
    do
        eval "printf \" \${p$e}\${p$c}$c\$preset\""
    done
    echo
done
echo Done

{
    pushd $(dirname $0)
    root_dir=$(pwd -P)
    popd
} >/dev/null

: ${X11_RGB_TXT:=/usr/share/X11/rgb.txt}
[[ -r $X11_RGB_TXT ]] || X11_RGB_TXT=$root_dir/rgb.txt

function _to_rgb {
    while read r g b name
    do
        [[ -z "$name" ]] && name="$b" b=0
        if [[ "$name" == "$1" ]]
        then
            echo $r $g $b
            return
        fi
    done <$X11_RGB_TXT
    echo "$0: $FUNCNAME: Unknown color: $1" >&2
    exit 2
}

if $truecolor
then
    function _fg {
        local -r r=$1
        local -r g=$2
        local -r b=$3
        printf '\e[38;2;%d;%d;%dm' $r $g $b
    }

    function _bg {
        local -r r=$1
        local -r g=$2
        local -r b=$3
        printf '\e[48;2;%d;%d;%dm' $r $g $b
    }
else
    function _d {
        local -r r=$(( 5 * $1 / 255 ))
        local -r g=$(( 5 * $2 / 255 ))
        local -r b=$(( 5 * $3 / 255 )) 
        return $(( (36 * r) + (6 * g) + b + 16 ))
    }

    function _fg {
        local -r r=$1
        local -r g=$2
        local -r b=$3
        _d $r $g $b
        local -r rgb=$?
        printf '\e[38;5;%dm' $rgb
    }

    function _bg {
        local -r r=$1
        local -r g=$2
        local -r b=$3
        _d $r $g $b
        local -r rgb=$?
        printf '\e[48;5;%dm' $rgb
    }
fi

if $hash_cache
then
    function _fg_cache {
        local -r name="$1"
        local -r value="$2"
        fg_colors[$name]="$value"
    }

    function _bg_cache {
        local -r name="$1"
        local -r value="$2"
        bg_colors[$name]="$value"
    }

    function _fg_printf {
        local -r name="$1"
        printf ${fg_colors[$name]}
    }

    function _bg_printf {
        local -r name="$1"
        printf ${bg_colors[$name]}
    }
else
    function _fg_cache {
        local -r name="$1"
        local -r value="$2"
        fg_colors+=("$name")
        fg_values+=("$value")
    }

    function _bg_cache {
        local -r name="$1"
        local -r value="$2"
        bg_colors+=("$name")
        bg_values+=("$value")
    }

    function _fg_printf {
        local -r name="$1"
        for i in ${!fg_colors[@]}
        do
            if [[ "${fg_colors[i]}" == "$name" ]]
            then
                printf ${fg_values[i]}
                return
            fi
        done
    }

    function _bg_printf {
        local -r name="$1"
        for i in ${!bg_colors[@]}
        do
            if [[ "${bg_colors[i]}" == "$name" ]]
            then
                printf ${bg_values[i]}
                return
            fi
        done
    }
fi

while read r g b name
do
    [[ -z "$name" ]] && name="$b" b=0
    # Inline _fg and _bg for performance
    if $truecolor
    then
        _fg_cache "$name" "\e[38;2;$r;$g;${b}m"
        _bg_cache "$name" "\e[48;2;$r;$g;${b}m"
    else
        r=$(( 5 * r / 255 ))
        g=$(( 5 * g / 255 ))
        b=$(( 5 * b / 255 )) 
        rgb=$(( (36 * r) + (6 * g) + b + 16 ))
        _fg_cache "$name" "\e[38;5;${rgb}m"
        _bg_cache "$name" "\e[48;5;${rgb}m"
    fi
done <$X11_RGB_TXT

function c {
    case $# in
    1 | 3 ) set -- fg "$@" ;;
    2 | 4 ) case $1 in
        fg | bg ) ;;
        * ) echo "Usage: $0: $FUNCNAME [fg|bg] <named-color|red8 green8 blue8>" >&2
            exit 2 ;;
        esac ;;
    * ) echo "Usage: $0: $FUNCNAME [fg|bg] <named-color|red8 green8 blue8>" >&2
        exit 2 ;;
    esac

    local r g b
    case $2 in
    [0-9]* ) r=$2 g=$3 b=$3 ;;
    * ) case $1 in
        fg ) _fg_printf "$2" ;;
        bg ) _bg_printf "$2" ;;
        esac
        return ;;
    esac
    readonly r g b
    case $1 in
    fg ) _fg $r $g $b ;;
    bg ) _bg $r $g $b ;;
    esac
}

for r in $(seq 5 10 255)
do
    c bg $r 0 0
    printf '  '
done
printf '\e[0m\n'

for color
do
    printf "$(c $color)$color$preset\n"
done
