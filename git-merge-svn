#!/bin/bash

tree_root=$(git rev-parse --show-toplevel)
program=${0##*/}
lock=$tree_root/.git/svn/$program.lock
config_name=${program/git-/}
program=${program/git-/git }

function print_usage {
    cat <<EOU
Usage: $program [--abort][--continue][-d|--debug][-h|--help][-i|--interactive][-n|--dry-run][-r|--svn-remote=<remote>][--show-details][-v|--verbose] [branch]
EOU
}

function print_help {
    print_usage
    cat <<EOH

$program <branch>      Merge and restore tree on failure
$program -i <branch>   Interactive merge and preserve changes on failure
$program --abort       Restore tree after failed interactive merge
$program --continue    Continue merging after resolving conflicts

Arguments:
  branch                    Merge from <branch>

Flags:
  --abort                   Abort SVN merge and restore working tree
  --continue                Continue merging after resolving conflicts
  -d,--debug                Print debug output (implies verbose)
  -h,--help                 Print help and exit normally
  -i,--interactive          Resolve merge conflicts manually
  -r,--svn-remote=<remote>  Change svn remote (default: $svn_remote)
  --show-details            Print interactive merge details after failure
  -v,--verbose              Print verbose output

Settings:
  git config --set $config_name.svn-remote <svn-remote>
  git config --set $config_name.verbose <true|false>

Exit codes:
  0 - Merge successful and pushed to SVN
  1 - Merge or push failed (try interactive merge)
  2 - Usage error
EOH
}

function turn_on_debugging
{
    verbose=true
    export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o functrace
    set -o xtrace
}

function config_setting {
    local key=$1
    local default=$2
    setting=$(git config --get $config_name.$key)
    echo ${setting:-$default}
}

git=git
interactive=false
merge_abort=false
merge_continue=false
show_details=false
svn_remote=$(config_setting svn-remote svn)
verbose=$(config_setting verbose false)
while getopts :hinr:v-: opt
do
    [[ - == $opt ]] && opt=${OPTARG%%=*} OPTARG=${OPTARG#*=}
    case $opt in
    abort ) merge_abort=true ;;
    continue ) merge_continue=true ;;
    d | debug ) turn_on_debugging ;;
    h | help ) print_help ; exit 0 ;;
    i | interactive ) interactive=true ;;
    n | dry-run ) git='echo git' ;;
    r | svn-remote ) svn_remote=$OPTARG ;;
    show-details ) show_details=true ;;
    v | verbose ) verbose=true ;;
    * ) print_usage >&2 ; exit 2 ;;
    esac
done
shift $((OPTIND - 1))

if [[ ! -d $tree_root/.git/svn ]]
then
    echo "$program: Not a git SVN repository: $tree_root" >&2
    exit 2
fi

if $show_details
then
    case $# in
    0 ) ;;
    * ) print_usage >&2 ; exit 2 ;;
    esac
    if [[ ! -e $lock ]]
    then
        echo 'git merge-svn: Not in an interactive merge' >&2
        exit 2
    fi
    cat $lock
    exit $?
fi

svn_base=$(git config svn-remote.$svn_remote.url | sed -e "s#//.*@#//#")
if [[ -z $svn_base ]]
then
    echo "git merge-svn: No such SVN remote: $svn_remote" >&2
    exit 2
fi

function clean_lock {
    local code=$1
    (( 0 == $code )) && rm -f $lock
}
trap 'clean_lock $?' EXIT

function prepare_and_lock {
    last_commit=$(git rev-parse $from_branch)
    ancestor_branch=$(git merge-base $from_branch $to_branch)
    git_merged=false
    if [[ $ancestor_branch == $last_commit ]]
    then
        git_merged=true
        ancestor_branch=$(git merge-base $from_branch "$to_branch~1")
    fi
    to_svn_rev=$(git svn find-rev $to_branch)
    from_svn_rev=$(git svn find-rev $from_branch)

    if [[ -z $from_svn_rev ]]
    then
        echo "git merge-svn: Branch is not pushed: $from_branch" >&2
        exit 2
    fi

    if $git_merged && [[ -z $to_svn_rev ]]
    then
        echo 'git merge-svn: Already up to date'
        exit 0
    fi

    new_merge_info=$(git log --reverse $ancestor_branch..$from_branch \
        | grep 'git-svn-id' \
        | tr -s ' ' \
        | cut -d' ' -f3 \
        | sed -e "s,$svn_base,," -e 's/@/:/')
    if [[ -z $new_merge_info ]]
    then
        echo 'git merge-svn: Cannot find SVN revisions' >&2
        exit 2
    fi
    old_merge_info=$(git svn propget svn:mergeinfo 2>/dev/null)

    if [[ -n $old_merge_info ]]
    then
        merge_info="$old_merge_info
    $new_merge_info"
    else
        merge_info="$new_merge_info"
    fi

    cat <<EOL >$lock
svn_remote=$svn_remote
svn_base=$svn_base
from_branch=$from_branch
svn_merged=$svn_merged
merge_info='$merge_info'
EOL
}

if $merge_abort
then
    case $# in
    0 ) ;;
    * ) print_usage >&2 ; exit 2 ;;
    esac
    if [[ ! -e $lock ]]
    then
        echo 'git merge-svn: Not in an interactive merge' >&2
        exit 2
    fi
    git merge --abort
    exit $?
fi

to_branch=$(git rev-parse --abbrev-ref HEAD)

if $merge_continue
then
    case $# in
    0 ) ;;
    * ) print_usage >&2 ; exit 2 ;;
    esac
    if [[ ! -e $lock ]]
    then
        echo 'git merge-svn: Not in an interactive merge' >&2
        exit 2
    fi

    . $lock
else
    case $# in
    1 ) from_branch=$1 ;;
    * ) print_usage >&2 ; exit 2 ;;
    esac
    if [[ -e $lock ]]
    then
        echo 'git merge-svn: Already merging (rm $lock to force)' >&2
        exit 2
    fi

    if [[ -z $(git branch --list $from_branch) ]]
    then
        echo "git merge-svn: No such branch: $from_branch" >&2
        exit 2
    fi

    prepare_and_lock
fi

if $verbose
then
    cat <<EOM
SVN merging with:
  - svn-remote: $svn_remote
  - svn-base: $svn_base
  - to-branch: $to_branch
  - from-branch: $from_branch
  - ancestor-branch: $ancestor_branch
  - last-commit: $last_commit
  - merge-info: $merge_info
EOM
fi

function interactive_help {
    cat <<EOM

Try merging manually and committing, but do not push.  Use --continue after
committing conflict resolution, or --abort to quit and restore the working
tree:

> # Fix conflicts
> git commit -a -m 'Some merge messages'
> $program --continue  # Or --abort to quit

Helpful commands:
> $program --show-details
> $program --dru-run $from_branch

Details:
EOM
    sed 's/^\([^=]*=\)/  - \1/' <$lock
}

if ! $git_merged && ! $git merge --no-ff $from_branch
then
    echo "$program: Cannot automatically merge" >&2
    if $interactive
    then
        interactive_help
    else
        $git merge --abort
        rm -f $lock
    fi
    exit 1
fi

if ! $git rebase $to_branch
then
    echo "$program: Cannot reorder commits" >&2
    if $interactive
    then
        interactive_help
    else
        $git rebase --abort
        rm -f $lock
    fi
    exit 1
fi

if ! $git svn dcommit --mergeinfo "$merge_info"
then
    echo "$program: Cannot push to SVN" >&2
    if $interactive
    then
        interactive_help
    else
        rm -f $lock
    fi
    exit 1
fi
