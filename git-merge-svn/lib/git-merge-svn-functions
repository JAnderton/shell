#!/bin/bash

function _setup_repo_branch_and_clones {
    svnadmin create mergey

    svn checkout -q file://$PWD/mergey svn
    pushd svn
    svn mkdir trunk tags branches
    svn commit -m 'Standard layout'
    svn copy trunk branches/develop
    svn commit -m 'Branch develop'
    popd

    # All repos start with 1 common commit
    and_commit_in svn_trunk 'foo' 'Common commit'

    git svn clone -s file://$PWD/mergey git
    pushd git
    git checkout -b develop origin/develop
    popd
}

function trunk {
    case $# in
    3 ) ;;
    * ) error 'Missing commit details for trunk' ;;
    esac

    local file=$1
    local message=$2
    local content=$3
    shift 3
}

function _svn_commit {
    local dir=$1
    local file=$2
    local commit_message=$3
    local contents=$4

    pushd svn/$dir
    echo "$contents" >$file
    svn add $file
    svn commit -m "$commit_message"
    popd
}

function _git_commit {
    local branch=$1
    local file=$2
    local commit_message=$3
    local contents=$4

    pushd git
    git checkout $branch
    echo "$contents" >$file
    git add $file
    git commit $file -m "$commit_message"
    popd
}

function svn_trunk {
    case $# in
    2 | 3 ) local file=$1 commit_message=$2 contents=$3 ;;
    * ) error 'No file and commit message and contents for svn_trunk' ;;
    esac

    _svn_commit trunk $file "$commit_message" "$contents"
}

function svn_branch {
    case $# in
    2 | 3 ) local file=$1 commit_message=$2 contents=$3 ;;
    * ) error 'No file and commit message and contents for svn_branch' ;;
    esac

    _svn_commit branches/develop $file "$commit_message" "$contents"
}

function git_trunk {
    case $# in
    2 | 3 ) local file=$1 commit_message=$2 contents=$3 ;;
    * ) error 'No file and commit message and contents for git_trunk' ;;
    esac

    _git_commit master $file "$commit_message" "$contents"
}

function git_branch {
    case $# in
    2 | 3 ) local file=$1 commit_message=$2 contents=$3 ;;
    * ) error 'No file and commit message and contents for git_branch' ;;
    esac

    _git_commit develop $file "$commit_message" "$contents"
}

function and_commit_in {
    case $1 in
    svn_trunk | svn_branch | git_trunk | git_branch ) "$@" ;;
    * ) error 'No svn_trunk or svn_branch or git_trunk or git_branch for and_commit_in' ;;
    esac
}

function and_no_changes {
    pass # TODO: Check git HEAD hashes that nothing happened
}

function then_exit {
    local actual=$exit_code
    local expected=$1 ; shift

    if (( actual == expected ))
    then
        "$@"
    else
        fail "Wrong exit code when merging: expected $expected, got $actual"
    fi
}

function _merge_develop_from_master {
    pushd git
    git checkout develop
    git merge-svn -i -m "Testing $test_name" master
    local code=$?
    popd
    return $code
}

function when_merge {
    _merge_develop_from_master
    local exit_code=$?

    case $1 in
    then_exit ) "$@" ;;
    * ) error 'No then_exit for when_merge' ;;
    esac
}

function given_repo {
    _setup_repo_branch_and_clones

    case $1 in
    and_commit_in | when_merge ) "$@" ;;
    * ) error 'No and_commit_in or when_merge for given_repo' ;;
    esac
}

function scenario {
    trap 'rm -rf $test_root' RETURN
    # Cater to Linux or Mac
    test_root=$(mktemp -d 2>/dev/null || mktemp -d -t ${0##*/})
    cd $test_root

    local scenario_text="scenario $@"
    local test_name='<UNDEFINED>'

    case $2 in
    given_repo ) test_name="$1" ; shift ; "$@" ;;
    * ) error 'No given_repo for scenario' ;;
    esac
}




function commit_on_trunk_only {
    pushd git
    touch bar
    git add bar
    git commit -a -m 'Trunk only commit'
    git svn dcommit
    popd
}

function commit_on_branch_only {
    pushd git
    git checkout develop
    touch baz
    git add baz
    git commit -a -m 'Branch only commit'
    git svn dcommit
    popd
}

function commit_conflict {
    pushd git
    git checkout master
    echo 'Trunk conflict' >foo
    git commit -a -m 'Trunk conflict'
    git svn dcommit

    git checkout develop
    echo 'Branch conflict' >foo
    git commit -a -m 'Branch conflict'
    git svn dcommit
    popd
}

function commit_trunk_only_again {
    pushd git
    git checkout master
    echo 'Trunk update' >bar
    git commit -a -m 'Trunk update'
    git svn dcommit
    popd
}

function commit_branch_only_again {
    pushd git
    echo 'Branch update' >bar
    git commit -a -m 'Branch update'
    git svn dcommit
    popd
}
